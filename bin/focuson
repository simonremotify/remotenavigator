#!/usr/bin/python3

import argparse
import graphviz
import json
import os

bindir = os.path.dirname(os.path.realpath(__file__))
defaultmodel = os.path.join(bindir, '..', 'model', 'model.rnm')

parser = argparse.ArgumentParser(description='Output a sub-graph with the given node as the focus.')
parser.add_argument('--model', default=defaultmodel)
parser.add_argument('--focus')
parser.add_argument('--subset', action='append')

args = parser.parse_args()

modelfile = open(args.model, 'r')
model = json.load(modelfile)

def makeInEdges(outedges):
    inedges = {}
    for source,targets in outedges.items():
        for outedgeparams in targets:
            target = outedgeparams['target']
            if target not in inedges:
                inedges[target] = []
            inedges[target].append({'source': source})

    return inedges

def findIncluded(nodes, outedges, inedges, focus):
    stack = [focus]
    included = set()

    # forward from focus
    while(len(stack)):
        current = stack.pop()
        included.add(current)

        if current not in outedges:
            continue
        currentoutedges = outedges[current]

        for outedgeparams in currentoutedges:
            target = outedgeparams['target']
            stack.append(target)

    stack = [focus]
    # back from focus
    while(len(stack)):
        current = stack.pop()
        if current != focus and current in included:
            continue
        included.add(current)

        print("Current ", current)

        if current not in inedges:
            continue
        currentinedges = inedges[current]

        for inedgeparams in currentinedges:
            source = inedgeparams['source']
            stack.append(source)

    return included

def subgraph(nodes, outedges, include):
    subgraphnodes = {k:v for (k,v) in nodes.items() if k in include}
    print("subgraphnodes ", subgraphnodes)

    subgraphoutedges = {source:[params for params in targets if params['target'] in include]
                            for (source,targets) in outedges.items() if source in include}

    return subgraphnodes, subgraphoutedges


type2shape = {'problem': 'hexagon',
              'practice': 'cds',
              'benefit': 'box'}
type2bgcolor = {'problem': '#f19292',
                'practice': '#f6d186',
                'benefit': '#cbe2b0'}
type2margin = {'problem': '0.1',
                'practice': '0.3',
                'benefit': '0.22'}

def toGraphviz(nodes, outedges):
    dot = graphviz.Digraph(format='png')
    for (label,nodeinfo) in nodes.items():
        dot.node(label,
                 shape=type2shape[nodeinfo['type']],
                 style='rounded,filled',
                 penwidth='0',
                 fillcolor=type2bgcolor[nodeinfo['type']],
                 fontname='Exo',
                 margin=type2margin[nodeinfo['type']])
    for (source, targets) in outedges.items():
        for target in targets:
            dot.edge(source, target['target'])

    return dot


nodes = model['nodes']
outedges = model['outedges']
inedges = makeInEdges(outedges)
focus = args.focus

g = toGraphviz(nodes, outedges)
g.render('whole_model')

for focus in nodes:
    included = findIncluded(nodes, outedges, inedges, focus)
    g = toGraphviz(*subgraph(nodes, outedges, included))
    g.attr(label=focus)
    g.render('graph_' + focus)

for (i,subset) in enumerate(args.subset):
    included = subset.split(',')
    print("Subset ", included)
    g = toGraphviz(*subgraph(nodes, outedges, included))
    g.attr(rankdir='LR')
    g.render('subset_' + str(i))
