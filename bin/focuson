#!/usr/bin/python3

import argparse
import graphviz
import json
import os
import re

bindir = os.path.dirname(os.path.realpath(__file__))
defaultmodel = os.path.join(bindir, '..', 'model', 'model.rnm')

parser = argparse.ArgumentParser(description='Output a sub-graph with the given node as the focus.')
parser.add_argument('--model', default=defaultmodel)
parser.add_argument('--focus')
parser.add_argument('--allfoci', action='store_true')
parser.add_argument('--subset', action='append')
parser.add_argument('--outformat', default='svg')
parser.add_argument('--maxdepth', type=int, default=float('inf'))

args = parser.parse_args()

modelfile = open(args.model, 'r')
model = json.load(modelfile)

def makeInEdges(outedges):
    inedges = {}
    for source,targets in outedges.items():
        for outedgeparams in targets:
            target = outedgeparams['target']
            if target not in inedges:
                inedges[target] = []
            inedges[target].append({'source': source})

    return inedges

def findIncluded(nodes, outedges, inedges, focus, maxdepth):
    included = set()

    def findConnected(edges, end):
        stack = [(focus,0)]

        # forward from focus
        while(len(stack)):
            (current,depth) = stack.pop()
            included.add(current)

            for edgeparams in edges.get(current, []):
                print(edgeparams)
                adj = edgeparams[end]
                if depth < maxdepth: stack.append((adj,depth+1))

    findConnected(outedges, 'target')
    findConnected(inedges, 'source')

    return included

def subgraph(nodes, outedges, include):
    subgraphnodes = {k:v for (k,v) in nodes.items() if k in include}
    print("subgraphnodes ", subgraphnodes)

    subgraphoutedges = {source:[params for params in targets if params['target'] in include]
                            for (source,targets) in outedges.items() if source in include}

    return subgraphnodes, subgraphoutedges

def findKeysMatchingRegexp(map, regexp):
    return [k for k in map if re.match(regexp, k)]

type2shape = {'problem': 'hexagon',
              'practice': 'cds',
              'benefit': 'box'}
type2bgcolor = {'problem': '#325384',
                'practice': '#f0f0c9',
                'benefit': '#f33ad7'}
type2fontcolor = {'problem': '#dddddd',
                  'practice': '#111111',
                  'benefit': '#ffffff'}
type2margin = {'problem': '0.1',
                'practice': '0.3',
                'benefit': '0.22'}
edgetype2style = {'similar': 'dashed'}
edgetype2arrowhead = {'similar': 'none'}
edgetype2headlabel = {'detracts': '-'}
edgetype2color = {'detracts': 'black:invis:black'}
format2dpi = {'svg': '50',
              'png': '300'}


def toGraphviz(nodes, outedges):
    dot = graphviz.Digraph(format=args.outformat)
    dot.attr(rankdir='LR')
    dot.attr(dpi=format2dpi.get(args.outformat, '50'))
    dot.attr(bgcolor='#99999900')
    for (label,nodeinfo) in nodes.items():
        dot.node(label,
                 shape=type2shape.get(nodeinfo['type'], 'box'),
                 style='rounded,filled',
                 penwidth='0',
                 fillcolor=type2bgcolor.get(nodeinfo['type'], '#777777'),
                 fontcolor=type2fontcolor.get(nodeinfo['type'], '#ffffff'),
                 fontname='Exo',
                 margin=type2margin.get(nodeinfo['type'],'0.22'),
                 tooltip=nodeinfo.get('comment', ''))
    for (source, targets) in outedges.items():
        for target in targets:
            dot.edge(source, target['target'],
                     tooltip=target.get('comment', ''),
                     style=edgetype2style.get(target.get('type', ''), ''),
                     arrowhead=edgetype2arrowhead.get(target.get('type', ''), ''),
                     color=edgetype2color.get(target.get('type', ''), ''),
                     headlabel=edgetype2headlabel.get(target.get('type', ''), ''))

    return dot

def renderGraphForFoci(nodes, outedges, inedges, foci, outname, maxdepth):
    included = set()
    for f in foci:
        included.update(findIncluded(nodes, outedges, inedges, f, maxdepth))
    subg = subgraph(nodes, outedges, included)
    g = toGraphviz(*subg)
    g.attr(label=outname)
    g.render('graph_' + outname)

    return subg


def groupEdgesByType(edges):
    grouped = {}
    for e in edges:
        grouped.setdefault(e.get('type', None), []).append(e)

    return grouped

def getRelation(sourceinfo, target):
    defaults = {"problem": "Problem '%s' is addressed by '%s'",
                "practice": "Practice '%s' supports '%s'",
                "threat": "Threat '%s' is addressed by '%s'"
                }
    default = defaults.get(sourceinfo['type'], "%s (" + sourceinfo['type'] + ") -> %s")

    relations = {('threat','detracts'): "Threat '%s' detracts from '%s'",
                 ('threat', 'similar'): "Threat '%s' is similar to '%s'"}

    return relations.get((sourceinfo['type'], target.get('type', None)), default)

def describeEdge(sourcelabel, sourceinfo, target):
    relation = getRelation(sourceinfo, target)
    return relation % (sourcelabel, target['target'])
    description = "%s %s %s %s" % (sourceinfo['type'], sourcelabel, target.get('type', ''), target['target'])
    return description

def renderHtmlForNodes(nodes, outedges, outname):
    import xml.etree.ElementTree as ET

    html = ET.Element('html')
    head = ET.SubElement(html, 'head')
    body = ET.SubElement(html, 'body')
    title = ET.SubElement(body, 'h1')
    title.text = outname
    ET.SubElement(body, 'img', attrib={'src': 'graph_'+outname+'.svg'})

    for (label,nodeinfo) in nodes.items():
        h2 = ET.SubElement(body, 'h2')
        h2.text = label
        if 'comment' in nodeinfo:
            p = ET.SubElement(body, 'p')
            p.text = nodeinfo.get('comment', '')

        for (type, targets) in groupEdgesByType(outedges.get(label, [])).items():
            for target in targets:
                h4 = ET.SubElement(body, 'h4')
                h4.text = describeEdge(label, nodeinfo, target)

                p = ET.SubElement(body, 'p')
                p.text = target.get('comment', '')

#        dot.node(label,
#                 shape=type2shape.get(nodeinfo['type'], 'box'),
#                 style='rounded,filled',
#                 penwidth='0',
#                 fillcolor=type2bgcolor.get(nodeinfo['type'], '#777777'),
#                 fontcolor=type2fontcolor.get(nodeinfo['type'], '#ffffff'),
#                 fontname='Exo',
#                 margin=type2margin.get(nodeinfo['type'],'0.22'),
#                 tooltip=nodeinfo.get('comment', ''))
#    for (source, targets) in outedges.items():
#        for target in targets:
#            dot.edge(source, target['target'],
#                     tooltip=target.get('comment', ''),
#                     style=edgetype2style.get(target.get('type', ''), ''),
#                     arrowhead=edgetype2arrowhead.get(target.get('type', ''), ''),
#                     color=edgetype2color.get(target.get('type', ''), ''),
#                     headlabel=edgetype2headlabel.get(target.get('type', ''), ''))
    style = ET.SubElement(head, 'style')
    style.text = """\
    h2 { margin-top: 25px; margin-bottom: 5px }
    h4 { margin-left: 5px; margin-bottom: 0px; }
    h2 + p { margin-left: 0px; font-style: italic }
    p { margin: 5px; }
    """

    htmlfile = open("graph_" + outname + ".html", "w")
    htmlfile.write(ET.tostring(html).decode("utf-8"))

nodes = model['nodes']
outedges = model['outedges']
inedges = makeInEdges(outedges)

g = toGraphviz(nodes, outedges)
g.render('whole_model')

if args.focus:
    foci = findKeysMatchingRegexp(nodes, args.focus)
    subg = renderGraphForFoci(nodes, outedges, inedges, foci, args.focus, args.maxdepth)
    renderHtmlForNodes(*subg, args.focus)

if args.allfoci:
    for n in nodes:
        filename = n.translate(n.maketrans("/", "-"))
        subg = renderGraphForFoci(nodes, outedges, inedges, [n], filename, args.maxdepth)
        renderHtmlForNodes(*subg, filename)

if args.subset:
    for (i,subset) in enumerate(args.subset):
        included = subset.split(',')
        print("Subset ", included)
        g = toGraphviz(*subgraph(nodes, outedges, included))
        g.attr(rankdir='LR')
        g.render('subset_' + str(i))
